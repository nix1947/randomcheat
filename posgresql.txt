-- Extenson are created to wrap objects into single unit to make them managable. 
create extension adminpack schema pg_catalog version "1.0"; 


-- Joins in table. 
* left join 
* right join 
* full outer join 
* cross join 
* natural join 



-- Postgresql natural join. 
* natural join create implicit join based on the matching column between two table
* natural join can be (inner, left, right) join. 
* postgresql will use the inner join by default. 


-- Natural join. 
select * from table1 natural join table2 

-- Inner jon 
select * from tblpolicy detail inner join tblagent using(AgentCode) -- AgentCode is the common column between two tables. 
select * from tblpolicy inner join tblagent on tblpolicy.agentcode = tblagent.agentcode 


-- cross join.
  * query all the data combinly from both tables. 
  * doesn't require the table to have matching columns. 
  
  select * from tbl1 cross join tbl2 
  
  
  -- left join
  * Return the records from all records from left join and the matching records from the right table. 
  
  
  -- full outer join
  select * from table1 full outer join table2 on table1.id = table2.id 
  where table1.column2 is NULL
  order by column asc
  
  -- Triggers ---
     * SQL trigger is a function that automatically invoked when an event(insert, update, delete, truncate) associated with a table occours. 
     * Trigger is a user defined function that binds with table. 
     * Trigger can fired before or after event is occoured
     * Types of trigger
        * Row tigger: If a trigger that effects 20 rows, row based trigger call 20 times. 
        * Statement trigger. : Invoked just one time, 
     * Benfits: Maintain data integrity rules, check activities of an application
     * By default, postgresql fires triggers for the truncate event. 
     * Postgresql allow to define statement level triggers in views. 
     * Trigger function is created using create function statemnet
     * Trigger function is bind to table using create statement. 
     * Trigger function does not take arguments and has return value trigger. 
     
     
     Example
     ........
     a. creating trigger functon
     create function trigger_function() return trigger AS 
     
     b. creating trigger. 
     create tigger trigger_name  { before | after | instead of | | {EVENT | OR } on table_name [ for [each] { row | statement } ] execute
      procedure trigger_functon 
      
     Three step process to create a trigger 
     
      1. Create a table 
      2. Define a function 
      3. Create the trigger
      
      -- Create tables
      create table employees( id int4 primary key not null, first_name varchar(40) not null, last_name varchar(40) not null); 
      create table employee_audits ( id int4 primary key not null, employee_id int4 not null, last_name varchar(40) not null, changed_on timestamp(6) not null   )
     
        
      -- Create trigger function. 
      -- Let's create a trigger function that logs changes in last name, 
      
  
  
  
